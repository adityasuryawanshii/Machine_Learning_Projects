# -*- coding: utf-8 -*-
"""TASK01PDG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x88O1fOlu87SLhs7rG--BAJNf0YPLlCF

# **Project Name:** House Price Prediction using Linear Regression
#**TASK 01**
<br>**Description:**
Implement a linear regression model to predict the prices of houses based on their square footage and the number of bedrooms and bathrooms.
"""

from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/MyDrive/PP/TASK01PDG

import pandas as pd

df=pd.read_csv("/content/drive/MyDrive/PP/TASK01PDG/House Prices.csv")

"""# **Studying Data**"""

df.head()

df.describe()

df.info()

"""# **Defining X & Y**"""

df.columns

y=df['Price']
X=df[[ 'Sqft_living','Bedrooms', 'Bathrooms']]

from sklearn.model_selection import train_test_split

"""# **Dividing data into Train-Test**"""

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=2529)

X.shape,X_train.shape,X_test.shape

y.shape,y_train.shape,y_test.shape

"""**Removing rows having NULLS**"""

X_train = X_train.dropna()
y_train = y_train[X_train.index]

from sklearn.linear_model import LinearRegression
model=LinearRegression()

"""# **Training Model**"""

model.fit(X_train, y_train)

y_pred=model.predict(X_test)

# step8: evaluation
from sklearn.metrics import mean_absolute_percentage_error, mean_absolute_error, mean_squared_error
mean_absolute_percentage_error(y_test,y_pred)

mean_squared_error(y_test,y_pred)

"""# **Predicting house price by giving parameters like bedrooms,bathrooms, & Square Footage.**"""

def predict_price(bedrooms, bathrooms, sqft_living):
  """
  Predicts the price of a house based on its square footage, number of bedrooms, and number of bathrooms.

  Args:
    bedrooms: The number of bedrooms in the house.
    bathrooms: The number of bathrooms in the house.
    sqft_living: The square footage of the house.

  Returns:
    The predicted price of the house.
  """
  # Create a DataFrame with the input values.
  input_data = pd.DataFrame({
      'Sqft_living': [sqft_living],
      'Bedrooms': [bedrooms],
      'Bathrooms': [bathrooms],

  })

  # Predict the price of the house using the model.
  predicted_price = model.predict(input_data)[0]

  # Return the predicted price.
  return predicted_price

# Example usage:

sqft_living=int(input("Enter Square footage: "))
bedrooms=int(input("Enter number of bedrooms: "))
bathrooms=int(input("Enter number of bathrooms: "))
predicted_price = predict_price(bedrooms, bathrooms, sqft_living)
print(f"Predicted price: {predicted_price}")

"""# **Relation between Sq_ft & House Price accordingly**"""

import seaborn as sns
sns.regplot(x='Sqft_living', y='Price' ,data = df,fit_reg=True)
